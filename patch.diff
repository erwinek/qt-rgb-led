--- a/main.cpp
+++ b/main.cpp
@@ -1,5 +1,6 @@
 #include <QCoreApplication>
+#include "LedTextDisplay.h"
 #include "led-matrix.h"
 #include "graphics.h"
 using namespace rgb_matrix;
@@ -30,6 +31,16 @@ int main(int argc, char *argv[]) {
     FrameCanvas *canvas = matrix->CreateFrameCanvas();
 
+    // Tworzenie komponentu do wyświetlania
+    LedTextDisplay display(matrix->width(), matrix->height());
+    display.setScore(888);
+    display.setHighScore(600);
+    display.setCredits(99);
+    display.setScrollText("Boxer ProGames");
+
     QTimer timer;
     QObject::connect(&timer, &QTimer::timeout, [&]() {
-        QImage image(matrix->width(), matrix->height(), QImage::Format_RGB888);
+        QImage image(matrix->width(), matrix->height(), QImage::Format_RGB888);
         image.fill(Qt::black);
-        QPainter painter(&image);
+        QPainter painter(&image);
-        // ... (dotychczasowy kod rysowania)
-        painter.end();
+        // Wyświetl tekst przez LedTextDisplay
+        display.render(image, painter);
 
         canvas = matrix->SwapOnVSync(canvas);
         for (int y = 0; y < image.height(); ++y) {
             for (int x = 0; x < image.width(); ++x) {
                 QColor c = image.pixelColor(x, y);
                 canvas->SetPixel(x, y, c.red(), c.green(), c.blue());
             }
         }
     });
     timer.start(100);
 
     return app.exec();
 }
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -25,6 +25,7 @@ target_link_libraries(qt-rgb-led
     rgbmatrix
     Qt5::Gui
     rgbmatrix
+    Qt5::Core
 )
 add_dependencies(qt-rgb-led rgbmatrix)
 
--- a/
+--- a/LedTextDisplay.h
+++ b/LedTextDisplay.h
@@ -0,0 +1,104 @@
+#ifndef LEDTEXTDISPLAY_H
+#define LEDTEXTDISPLAY_H
+
+#include <QImage>
+#include <QPainter>
+#include <QString>
+#include <QFont>
+
+class LedTextDisplay {
+public:
+    LedTextDisplay(int width, int height)
+        : w(width), h(height),
+          score(0), highScore(0), credits(0),
+          scrollText(""), scrollX(width),
+          font("Monospace", 10, QFont::Bold)
+    {
+        font.setStyleHint(QFont::TypeWriter);
+    }
+
+    void setScore(int v) { score = v; }
+    void setHighScore(int v) { highScore = v; }
+    void setCredits(int v) { credits = v; }
+    void setScrollText(const QString &text) {
+        scrollText = text;
+        scrollX = w;
+    }
+
+    void render(QImage &image, QPainter &painter) {
+        painter.setPen(Qt::green);
+        painter.setFont(font);
+
+        painter.drawText(1, 12, QString("%1").arg(score, 3, 10, QChar('0')));
+        painter.drawText(1, 26, QString("%1").arg(highScore, 3, 10, QChar('0')));
+        painter.drawText(1, 40, QString("%1").arg(credits, 2, 10, QChar('0')));
+
+        painter.drawText(scrollX, 54, scrollText);
+        int textWidth = painter.fontMetrics().horizontalAdvance(scrollText);
+        scrollX = (scrollX < -textWidth) ? w : scrollX - 1;
+    }
+
+private:
+    int w, h;
+    int score, highScore, credits;
+    QString scrollText;
+    int scrollX;
+    QFont font;
+};
+
+#endif // LEDTEXTDISPLAY_H
